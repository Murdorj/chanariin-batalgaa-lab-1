package com.example;

import io.github.bonigarcia.wdm.WebDriverManager;
import io.github.cdimascio.dotenv.Dotenv;

import org.junit.jupiter.api.*;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import java.time.Duration;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class LoginTest {
    private WebDriver driver;

    // üëâ –≠–Ω–¥—ç—ç—Å: class-—ã–Ω —Ç“Ø–≤—à–∏–Ω–¥ –∑–∞—Ä–ª–∞—è (scope OK)
    private static final String BASE_URL     = "https://student.must.edu.mn";
    private static final Dotenv dotenv = Dotenv.load();
    private static final String user = dotenv.get("MUST_USER");
    private static final String pass = dotenv.get("MUST_PASS");

    @BeforeEach
    void setUp() {
        WebDriverManager.chromedriver().setup();
        driver = new ChromeDriver();
        driver.manage().window().maximize();
    }

    @Test
    void testLoginAndCheckStudentCode() {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));

        // 1) –ù—ç—ç—Ö
        driver.get(BASE_URL);

        // 2) Username/Password —Ç–∞–ª–±–∞—Ä (–æ–ª–æ–Ω locator-–æ–æ—Å —ç—Ö–Ω–∏–π —Ç–∞–∞—Ä—Å–Ω—ã–≥ —Ö—ç—Ä—ç–≥–ª—ç–Ω—ç)
        By userBy = By.cssSelector("input#UserName, input#username, input[name='UserName'], input[name='username']");
        By passBy = By.cssSelector("input#Password, input#password, input[name='Password'], input[name='password']");
        WebElement username = wait.until(ExpectedConditions.visibilityOfElementLocated(userBy));
        WebElement password = wait.until(ExpectedConditions.visibilityOfElementLocated(passBy));

        // 3) Login —Ç–æ–≤—á
        WebElement loginBtn = wait.until(ExpectedConditions.elementToBeClickable(
                By.cssSelector("input[type='submit'][value='–ù—ç–≤—Ç—Ä—ç—Ö'], button[type='submit']")
        ));

        // 4) –ù—ç–≤—Ç—Ä—ç—Ö
        username.sendKeys(user);  // üëà –Ω—ç–≥ –ª —É—Ç–≥—ã–≥ –∞—à–∏–≥–ª–∞–Ω–∞
        password.sendKeys(pass);
        loginBtn.click();

        // 5) Modal/backdrop –±–∞–π–≤–∞–ª —Ö–∞–∞—Ö
        closeModalIfPresent(wait);

        // 6) –ê–º–∂–∏–ª—Ç—Ç–∞–π login —ç—Å—ç—Ö (–∂–∏—à—ç—ç: '–•—É–≤–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª' –ª–∏–Ω–∫ —Ö–∞—Ä–∞–≥–¥–∞—Ö)
        assertTrue(driver.getPageSource().contains("–•—É–≤–∏–π–Ω –º—ç–¥—ç—ç–ª—ç–ª"),
                "Login –∞–º–∂–∏–ª—Ç—Ç–∞–π –±–æ–ª—Å–æ–Ω –±–∞–π—Ö —ë—Å—Ç–æ–π");

        // 7) –û—é—É—Ç–Ω—ã –∫–æ–¥—ã–≥ UI-–∞–∞—Å —É–Ω—à–∞–∞–¥ —Ö–∞—Ä—å—Ü—É—É–ª–∞—Ö
        WebElement codeEl = wait.until(ExpectedConditions.visibilityOfElementLocated(
                By.xpath("//div[@class='title' and normalize-space()='–û—é—É—Ç–Ω—ã –∫–æ–¥:']/following-sibling::div[contains(@class,'text')]")
        ));
        String actualCode = codeEl.getText().trim();
        assertEquals(user, actualCode, "–û—é—É—Ç–Ω—ã –∫–æ–¥ –∑”©–≤ —Ö–∞—Ä–∞–≥–¥–∞—Ö —ë—Å—Ç–æ–π");
    }

    @AfterEach
    void tearDown() {
        try {
            // logout —Ö–∏–π—Ö–∏–π–Ω ”©–º–Ω”© modal –±–∞–π–≤–∞–ª —Ö–∞–∞—á–∏—Ö—ä—è
            closeModalIfPresent(new WebDriverWait(driver, Duration.ofSeconds(5)));

            // Logout (span —Ç–µ–∫—Å—Ç—ç—ç—Ä –Ω–∞–π–¥–≤–∞—Ä—Ç–∞–π –æ–ª–≥–æ—ë)
            WebElement logout = driver.findElement(By.xpath("//span[normalize-space()='–ì–∞—Ä–∞—Ö']/ancestor::a"));
            logout.click();

            // Logout –¥–∞—Ä–∞–∞ login —Ç–∞–ª–±–∞—Ä –±—É—Ü–∞–∂ –∏—Ä—ç—Ö–∏–π–≥ —à–∞–ª–≥–∞—Ö (—Å–æ–Ω–≥–æ–ª—Ç—Ç–æ–π)
            new WebDriverWait(driver, Duration.ofSeconds(5))
                    .until(ExpectedConditions.or(
                            ExpectedConditions.visibilityOfElementLocated(By.cssSelector("input#UserName, input#username")),
                            ExpectedConditions.textToBePresentInElementLocated(By.tagName("body"), "–ù—ç–≤—Ç—Ä—ç—Ö")
                    ));
        } catch (Exception ignore) {
        } finally {
            if (driver != null) driver.quit();
        }
    }

    /** Modal/backdrop –±–∞–π–≤–∞–ª —Ö–∞–∞—Ö (backdrop –¥—ç—ç—Ä JS click) */
    private void closeModalIfPresent(WebDriverWait wait) {
        try {
            WebElement backdrop = wait.until(ExpectedConditions.presenceOfElementLocated(
                    By.cssSelector("div.modal-backdrop")
            ));
            if (backdrop.isDisplayed()) {
                ((JavascriptExecutor) driver).executeScript("arguments[0].click();", backdrop);
                // backdrop –∞—Ä–∏–ª—Ç–∞–ª –±–∞–≥–∞—Ö–∞–Ω —Ö“Ø–ª—ç—ç–µ
                wait.until(ExpectedConditions.invisibilityOf(backdrop));
            }
        } catch (TimeoutException | NoSuchElementException ignored) {
            // modal –±–∞–π—Ö–≥“Ø–π –±–æ–ª –∑“Ø–≥—ç—ç—Ä –ª –∞–ª–≥–∞—Å–Ω–∞
        }
    }
}
